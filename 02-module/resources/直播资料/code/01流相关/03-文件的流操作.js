let fs = require('fs')

// 创建一个可读流 
let rs = fs.createReadStream('test.txt')
// 创建一个可写流
let ws = fs.createWriteStream('test1.txt')

rs.pipe(ws)

// 简洁多了，
// 经过刚才一系列的秀，我们要思考，
// 流是什么： 抽象的接口集合 

// Node.js 为什么要用流（想一想传电影的例子）
// 01 使用流操作数据可以简化代码书写
// 02 使用流操作可以分段数据，配合管道设计的思想，可以自由加工和转换数据

// 流是不是node.js 所独有（必然不是）
// node.js 是如何来使用流的呢？
// 在它的内部实现了一个 stream 模块。
// 这个模块就是使用流操作来处理数据的抽象接口集合
// 在 node.js 中的流就像是一个工具包，它里面有很多小工具，不同的工具就对应着不同的数据操作
// 因此在 Node.js 中就实现了四种类型的流操作： 可读流，可写流，双工流，转换流 

